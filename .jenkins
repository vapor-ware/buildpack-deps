pipeline {

  agent any

  triggers {
    upstream(upstreamProjects: 'vapor-ware/foundations/master', threshold: hudson.model.Result.SUCCESS)
  }

  environment {
    imageName = 'vaporio/buildpack-deps'
  }

  stages {
    stage('Build curl') {
      parallel {
        stage('ubuntu:bionic amd64') {
          steps {
            sh "docker build -t bionic-curl:amd64.${env.BRANCH_NAME}.${env.BUILD_NUMBER} --compress bionic/curl"
            sh "docker tag bionic-curl:amd64.${env.BRANCH_NAME}.${env.BUILD_NUMBER} ${imageName}:bionic-curl-amd64"
          }
        }

        stage('ubuntu:xenial amd64') {
          steps {
            sh "docker build -t xenial-curl:amd64.${env.BRANCH_NAME}.${env.BUILD_NUMBER} --compress xenial/curl"
            sh "docker tag xenial-curl:amd64.${env.BRANCH_NAME}.${env.BUILD_NUMBER} ${imageName}:xenial-curl-amd64"
          }
        }

        stage('ubuntu:focal amd64') {
          steps {
            sh "docker build -t focal-curl:amd64.${env.BRANCH_NAME}.${env.BUILD_NUMBER} --compress focal/curl"
            sh "docker tag focal-curl:amd64.${env.BRANCH_NAME}.${env.BUILD_NUMBER} ${imageName}:focal-curl-amd64"
          }
        }

        stage('ubuntu:bionic arm64') {
          agent {
            label 'arm64'
          }
          steps {
            sh "docker build -t bionic-curl:arm64.${env.BRANCH_NAME}.${env.BUILD_NUMBER} --compress bionic/curl"
            sh "docker tag bionic-curl:arm64.${env.BRANCH_NAME}.${env.BUILD_NUMBER} ${imageName}:bionic-curl-arm64"
          }
        }

        stage('ubuntu:xenial arm64') {
          agent {
            label 'arm64'
          }
          steps {
            sh "docker build -t xenial-curl:arm64.${env.BRANCH_NAME}.${env.BUILD_NUMBER} --compress xenial/curl"
            sh "docker tag xenial-curl:arm64.${env.BRANCH_NAME}.${env.BUILD_NUMBER} ${imageName}:xenial-curl-arm64"
          }
        }

        stage('ubuntu:focal arm64') {
          agent {
            label 'arm64'
          }
          steps {
            sh "docker build -t focal-curl:arm64.${env.BRANCH_NAME}.${env.BUILD_NUMBER} --compress focal/curl"
            sh "docker tag focal-curl:arm64.${env.BRANCH_NAME}.${env.BUILD_NUMBER} ${imageName}:focal-curl-arm64"
          }
        }
      }
    }

    stage('Publish curl Images') {
      when {
        branch 'master'
      }
      parallel {
        stage('amd64') {
          steps {
            withDockerRegistry(registry: [credentialsId: 'vio-docker-hub']) {
              sh "docker push ${imageName}:bionic-curl-amd64"
              sh "docker push ${imageName}:xenial-curl-amd64"
              sh "docker push ${imageName}:focal-curl-amd64"
            }
          }
        }

        stage('arm64') {
          agent {
            label 'arm64'
          }
          steps {
            withDockerRegistry(registry: [credentialsId: 'vio-docker-hub']) {
              sh "docker push ${imageName}:bionic-curl-arm64"
              sh "docker push ${imageName}:xenial-curl-arm64"
              sh "docker push ${imageName}:focal-curl-arm64"
            }
          }
        }
      }
    }

    stage('Publish curl Manifests') {
      when {
        branch 'master'
      }

      parallel {
        stage('bionic-curl') {
          steps {
            withDockerRegistry(registry: [credentialsId: 'vio-docker-hub']) {
              sh "docker manifest create --amend ${imageName}:bionic-curl ${imageName}:bionic-curl-amd64 ${imageName}:bionic-curl-arm64"
              sh "docker manifest push --purge ${imageName}:bionic-curl"
            }
          }
        }

        stage('xenial-curl') {
          steps {
            withDockerRegistry(registry: [credentialsId: 'vio-docker-hub']) {
              sh "docker manifest create --amend ${imageName}:xenial-curl ${imageName}:xenial-curl-amd64 ${imageName}:xenial-curl-arm64"
              sh "docker manifest push --purge ${imageName}:xenial-curl"
            }
          }
        }

        stage('focal-curl') {
          steps {
            withDockerRegistry(registry: [credentialsId: 'vio-docker-hub']) {
              sh "docker manifest create --amend ${imageName}:focal-curl ${imageName}:focal-curl-amd64 ${imageName}:focal-curl-arm64"
              sh "docker manifest push --purge ${imageName}:focal-curl"
            }
          }
        }
      }
    }

    stage('Build scm') {
      parallel {
        stage('ubuntu:bionic amd64') {
          steps {
            sh "docker build -t bionic-scm:amd64.${env.BRANCH_NAME}.${env.BUILD_NUMBER} --compress bionic/scm"
            sh "docker tag bionic-scm:amd64.${env.BRANCH_NAME}.${env.BUILD_NUMBER} ${imageName}:bionic-scm-amd64"
          }
        }

        stage('ubuntu:xenial amd64') {
          steps {
            sh "docker build -t xenial-scm:amd64.${env.BRANCH_NAME}.${env.BUILD_NUMBER} --compress xenial/scm"
            sh "docker tag xenial-scm:amd64.${env.BRANCH_NAME}.${env.BUILD_NUMBER} ${imageName}:xenial-scm-amd64"
          }
        }

        stage('ubuntu:focal amd64') {
          steps {
            sh "docker build -t focal-scm:amd64.${env.BRANCH_NAME}.${env.BUILD_NUMBER} --compress focal/scm"
            sh "docker tag focal-scm:amd64.${env.BRANCH_NAME}.${env.BUILD_NUMBER} ${imageName}:focal-scm-amd64"
          }
        }

        stage('ubuntu:bionic arm64') {
          agent {
            label 'arm64'
          }
          steps {
            sh "docker build -t bionic-scm:arm64.${env.BRANCH_NAME}.${env.BUILD_NUMBER} --compress bionic/scm"
            sh "docker tag bionic-scm:arm64.${env.BRANCH_NAME}.${env.BUILD_NUMBER} ${imageName}:bionic-scm-arm64"
          }
        }

        stage('ubuntu:xenial arm64') {
          agent {
            label 'arm64'
          }
          steps {
            sh "docker build -t xenial-scm:arm64.${env.BRANCH_NAME}.${env.BUILD_NUMBER} --compress xenial/scm"
            sh "docker tag xenial-scm:arm64.${env.BRANCH_NAME}.${env.BUILD_NUMBER} ${imageName}:xenial-scm-arm64"
          }
        }

        stage('ubuntu:focal arm64') {
          agent {
            label 'arm64'
          }
          steps {
            sh "docker build -t focal-scm:arm64.${env.BRANCH_NAME}.${env.BUILD_NUMBER} --compress focal/scm"
            sh "docker tag focal-scm:arm64.${env.BRANCH_NAME}.${env.BUILD_NUMBER} ${imageName}:focal-scm-arm64"
          }
        }
      }
    }

    stage('Publish scm Images') {
      when {
        branch 'master'
      }
      parallel {
        stage('amd64') {
          steps {
            withDockerRegistry(registry: [credentialsId: 'vio-docker-hub']) {
              sh "docker push ${imageName}:bionic-scm-amd64"
              sh "docker push ${imageName}:xenial-scm-amd64"
              sh "docker push ${imageName}:focal-scm-amd64"
            }
          }
        }

        stage('arm64') {
          agent {
            label 'arm64'
          }

          steps {
            withDockerRegistry(registry: [credentialsId: 'vio-docker-hub']) {
              sh "docker push ${imageName}:bionic-scm-arm64"
              sh "docker push ${imageName}:xenial-scm-arm64"
              sh "docker push ${imageName}:focal-scm-arm64"
            }
          }
        }
      }
    }

    stage('Publish scm Manifests') {
      when {
        branch 'master'
      }

      parallel {
        stage('bionic-scm') {
          steps {
            withDockerRegistry(registry: [credentialsId: 'vio-docker-hub']) {
              sh "docker manifest create --amend ${imageName}:bionic-scm ${imageName}:bionic-scm-amd64 ${imageName}:bionic-scm-arm64"
              sh "docker manifest push --purge ${imageName}:bionic-scm"
            }
          }
        }

        stage('xenial-scm') {
          steps {
            withDockerRegistry(registry: [credentialsId: 'vio-docker-hub']) {
              sh "docker manifest create --amend ${imageName}:xenial-scm ${imageName}:xenial-scm-amd64 ${imageName}:xenial-scm-arm64"
              sh "docker manifest push --purge ${imageName}:xenial-scm"
            }
          }
        }

        stage('focal-scm') {
          steps {
            withDockerRegistry(registry: [credentialsId: 'vio-docker-hub']) {
              sh "docker manifest create --amend ${imageName}:focal-scm ${imageName}:focal-scm-amd64 ${imageName}:focal-scm-arm64"
              sh "docker manifest push --purge ${imageName}:focal-scm"
            }
          }
        }
      }
    }

    stage('Build') {
      parallel {
        stage('ubuntu:bionic amd64') {
          steps {
            sh "docker build -t bionic-bp:amd64.${env.BRANCH_NAME}.${env.BUILD_NUMBER} --compress bionic"
            sh "docker tag bionic-bp:amd64.${env.BRANCH_NAME}.${env.BUILD_NUMBER} ${imageName}:bionic-amd64"
          }
        }

        stage('ubuntu:xenial amd64') {
          steps {
            sh "docker build -t xenial-bp:amd64.${env.BRANCH_NAME}.${env.BUILD_NUMBER} --compress xenial"
            sh "docker tag xenial-bp:amd64.${env.BRANCH_NAME}.${env.BUILD_NUMBER} ${imageName}:xenial-amd64"
          }
        }

        stage('ubuntu:focal amd64') {
          steps {
            sh "docker build -t focal-bp:amd64.${env.BRANCH_NAME}.${env.BUILD_NUMBER} --compress focal"
            sh "docker tag focal-bp:amd64.${env.BRANCH_NAME}.${env.BUILD_NUMBER} ${imageName}:focal-amd64"
          }
        }

        stage('ubuntu:bionic arm64') {
          agent {
            label 'arm64'
          }
          steps {
            sh "docker build -t bionic-bp:arm64.${env.BRANCH_NAME}.${env.BUILD_NUMBER} --compress bionic"
            sh "docker tag bionic-bp:arm64.${env.BRANCH_NAME}.${env.BUILD_NUMBER} ${imageName}:bionic-arm64"
          }
        }

        stage('ubuntu:xenial arm64') {
          agent {
            label 'arm64'
          }
          steps {
            sh "docker build -t xenial-bp:arm64.${env.BRANCH_NAME}.${env.BUILD_NUMBER} --compress xenial"
            sh "docker tag xenial-bp:arm64.${env.BRANCH_NAME}.${env.BUILD_NUMBER} ${imageName}:xenial-arm64"
          }
        }

        stage('ubuntu:focal arm64') {
          agent {
            label 'arm64'
          }
          steps {
            sh "docker build -t focal-bp:arm64.${env.BRANCH_NAME}.${env.BUILD_NUMBER} --compress focal"
            sh "docker tag focal-bp:arm64.${env.BRANCH_NAME}.${env.BUILD_NUMBER} ${imageName}:focal-arm64"
          }
        }
      }
    }

    stage('Publish Images') {
      when {
        branch 'master'
      }
      parallel {
        stage('amd64') {
          steps {
            withDockerRegistry(registry: [credentialsId: 'vio-docker-hub']) {
              sh "docker push ${imageName}:bionic-amd64"
              sh "docker push ${imageName}:xenial-amd64"
              sh "docker push ${imageName}:focal-amd64"
            }
          }
        }

        stage('arm64') {
          agent {
            label 'arm64'
          }
          steps {
            withDockerRegistry(registry: [credentialsId: 'vio-docker-hub']) {
              sh "docker push ${imageName}:bionic-arm64"
              sh "docker push ${imageName}:xenial-arm64"
              sh "docker push ${imageName}:focal-arm64"
            }
          }
        }
      }
    }

    stage('Publish Manifests') {
      when {
        branch 'master'
      }

      parallel {
        stage('bionic') {
          steps {
            withDockerRegistry(registry: [credentialsId: 'vio-docker-hub']) {
              sh "docker manifest create --amend ${imageName}:bionic ${imageName}:bionic-amd64 ${imageName}:bionic-arm64"
              sh "docker manifest push --purge ${imageName}:bionic"
            }
          }
        }

        stage('xenial') {
          steps {
            withDockerRegistry(registry: [credentialsId: 'vio-docker-hub']) {
              sh "docker manifest create --amend ${imageName}:xenial ${imageName}:xenial-amd64 ${imageName}:xenial-arm64"
              sh "docker manifest push --purge ${imageName}:xenial"
            }
          }
        }

        stage('focal') {
          steps {
            withDockerRegistry(registry: [credentialsId: 'vio-docker-hub']) {
              sh "docker manifest create --amend ${imageName}:focal ${imageName}:focal-amd64 ${imageName}:focal-arm64"
              sh "docker manifest push --purge ${imageName}:focal"
            }
          }
        }
      }
    }
  }
}
